// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4825.FRC_2014;

import org.usfirst.frc4825.FRC_2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import org.usfirst.frc4825.FRC_2014.Support.RobotDriveType;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public Joystick joystick2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton readyHammer;
    public JoystickButton fireHammer;
    public JoystickButton beltForward;
    public JoystickButton beltReverse;
    public JoystickButton armsUp;
    public JoystickButton armsDown;
    public JoystickButton toggleTheLatch;

    public SendableChooser robotDriveChooser = null;
    public SendableChooser robotJoysticChooser = null;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joystick2 = new Joystick(2);

        joystick1 = new Joystick(1);

        // SmartDashboard Buttons
        SmartDashboard.putData("refuelPneumatics", new refuelPneumatics());
        SmartDashboard.putData("releaseHammer", new releaseHammer());
        SmartDashboard.putData("toggleLatch", new ToggleTheLatch());
        SmartDashboard.putData("raiseArm", new raiseArm());
        SmartDashboard.putData("lowerArm", new lowerArm());
        SmartDashboard.putData("beltForward", new beltForward());
        SmartDashboard.putData("readyHammer", new readyHammer());
        SmartDashboard.putData("beltReverse", new beltReverse());
        SmartDashboard.putData("timedPullBackHammer", new timedPullBackHammer());
        SmartDashboard.putData("resetLoadBar", new resetLoadBar());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putNumber("Time of driving forward", 3.0);
        SmartDashboard.putNumber("Time of driving forward2", 2.0);
        SmartDashboard.putNumber("Time of driving backward", 0.0);
        SmartDashboard.putNumber("Time of waiting", 1.0);
        SmartDashboard.putNumber("Hammer Motor Speed", 0.75);
        SmartDashboard.putNumber("Arm Motor Speed", 1.0);
        SmartDashboard.putNumber("Max Hammer Pullback Time", 10.0);
        SmartDashboard.putNumber("Max Load Bar Reset Time", 13.0);
        SmartDashboard.putNumber("Drive Speed", 0.3);
        SmartDashboard.putNumber("Distance to stop at", 3300.0);

        readyHammer = new JoystickButton(joystick1, 3);
        readyHammer.whenPressed(new readyHammer());
        fireHammer = new JoystickButton(joystick1, 1);
        fireHammer.whenPressed(new releaseLatch());
        beltForward = new JoystickButton(joystick1, 5);
        beltForward.whileHeld(new beltForward());
        beltReverse = new JoystickButton(joystick1, 6);
        beltReverse.whileHeld(new beltReverse());
        armsUp = new JoystickButton(joystick1, 4);
        armsUp.whenPressed(new raiseArm());
        armsDown = new JoystickButton(joystick1, 2);
        armsDown.whenPressed(new lowerArm());
        toggleTheLatch = new JoystickButton(joystick1, 8);
        toggleTheLatch.whenPressed(new ToggleTheLatch());

        SmartDashboard.putBoolean("Hammer in Latch", false);
        SmartDashboard.putBoolean("Bar is Reset", false);

        robotDriveChooser = new SendableChooser();
        robotDriveChooser.addObject("Tank Drive", RobotDriveType.TANK_DRIVE);
        robotDriveChooser.addDefault("Arcade Drive", RobotDriveType.ARCADE_DRIVE);
        SmartDashboard.putData("Robot Drive Type", robotDriveChooser);

        robotJoysticChooser = new SendableChooser();
        robotJoysticChooser.addDefault("XBox Drive", RobotDriveType.TANK_DRIVE);
        robotJoysticChooser.addObject("Two Joystic Drive", RobotDriveType.ARCADE_DRIVE);
        SmartDashboard.putData("Robot Joystic Type", robotJoysticChooser);

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
