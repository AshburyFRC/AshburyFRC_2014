// Imports
package org.usfirst.frc4825.FRC_2014.subsystems;

import org.usfirst.frc4825.FRC_2014.RobotMap;
import org.usfirst.frc4825.FRC_2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc4825.FRC_2014.Robot;
import org.usfirst.frc4825.FRC_2014.Support.RobotDriveType;

public class DriveTrain extends Subsystem {

    SpeedController leftMotor1 = RobotMap.driveTrainLeftMotor1;
    SpeedController leftMotor2 = RobotMap.driveTrainLeftMotor2;
    SpeedController rightMotor1 = RobotMap.driveTrainRightMotor1;
    SpeedController rightMotor2 = RobotMap.driveTrainRightMotor2;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    private final double MOTOR_SMOOTHING_OMEGA = 0.75;
    private final double DRIFT = -0.1;
    private double mSpeed;

    public DriveTrain() {
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoysticks());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void processJoysticksInput(Joystick stick1, Joystick stick2) {
        RobotDriveType driveType = (RobotDriveType) Robot.oi.robotDriveChooser.getSelected();
        RobotDriveType joysticType = (RobotDriveType) Robot.oi.robotJoysticChooser.getSelected();
        if (joysticType == RobotDriveType.TANK_DRIVE) {
            //drive with xbox
            if (driveType == RobotDriveType.TANK_DRIVE) {
                //tank drive
                robotDrive41.tankDrive(-MOTOR_SMOOTHING_OMEGA * stick1.getAxis(Joystick.AxisType.kY),
                        -MOTOR_SMOOTHING_OMEGA * stick1.getRawAxis(5), true);
            } else if (driveType == RobotDriveType.ARCADE_DRIVE) {
                //arcade drive
                robotDrive41.arcadeDrive(-MOTOR_SMOOTHING_OMEGA * stick1.getAxis(Joystick.AxisType.kY),
                        -MOTOR_SMOOTHING_OMEGA * stick1.getRawAxis(4), true);
            }
        } else if (joysticType == RobotDriveType.ARCADE_DRIVE) {
            //drive with two joystics
            if (driveType == RobotDriveType.TANK_DRIVE) {
                // tank drive
                robotDrive41.tankDrive(-MOTOR_SMOOTHING_OMEGA * stick1.getAxis(Joystick.AxisType.kY),
                        -MOTOR_SMOOTHING_OMEGA * stick2.getAxis(Joystick.AxisType.kY), true);
                System.out.println("do two joystick tank drive.");
            } else if (driveType == RobotDriveType.ARCADE_DRIVE) {
                // arcade drive
                robotDrive41.arcadeDrive(-MOTOR_SMOOTHING_OMEGA * stick1.getAxis(Joystick.AxisType.kY),
                        -MOTOR_SMOOTHING_OMEGA * stick1.getAxis(Joystick.AxisType.kX), true);
            }
        }
    }

    public void stop() {
        robotDrive41.drive(0.0, 0.0);
    }

    public void setMotorOutputs(double leftOutput, double rightOutput) {
        robotDrive41.setLeftRightMotorOutputs(leftOutput, rightOutput);
    }
    
    public boolean driveToRange(int destination){
        mSpeed = SmartDashboard.getNumber("Autonomus Drive Speed");
        int currentRange = (int)(RobotMap.ultrasonic.getRangeMM());//get distance to wall
        if(currentRange > destination){//see if distance to wall is at required amount
            double angle = RobotMap.gyro.getAngle(); // get current heading
            robotDrive41.drive(mSpeed, DRIFT + angle * 0.03); // drive towards heading 0
            return false;
        }
        else{
            robotDrive41.drive(0,0);//stop
            return true;
        }
    }

    public void DriveForwardNoSens() {
        mSpeed = SmartDashboard.getNumber("Drive Speed");
        double angle = RobotMap.gyro.getAngle(); // get current heading
        robotDrive41.drive(mSpeed, DRIFT + angle * 0.03); // drive towards heading 0
        //robotDrive41.drive(mSpeed, DRIFT);
        Timer.delay(0.004);
    }

    public void DriveBackward() {
        mSpeed = -SmartDashboard.getNumber("Drive Speed");//sets speed to the negative to work with the drive train
        double angle = RobotMap.gyro.getAngle(); // get current heading
        System.out.println(angle);
        robotDrive41.drive(mSpeed, DRIFT + angle * 0.03); // drive towards heading 0
        Timer.delay(0.004);
    }
    
    public void resetGyro(){
        RobotMap.gyro.reset();
    }
}
