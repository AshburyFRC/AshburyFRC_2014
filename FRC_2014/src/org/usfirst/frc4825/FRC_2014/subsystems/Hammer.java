// RobotBuilder Version: 1.0
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// Always remember that Jonathan, Isidor and Slava are awesome. These sections
// will be updated in the future when you export to java from RobotBuilder.
// Do not put any code or make any change in the blocks indicating
// autogenerated code or it will be lost on an update. Deleting the
// comments indicating the section will prevent it from being updated
// in the future. 
package org.usfirst.frc4825.FRC_2014.subsystems;

import org.usfirst.frc4825.FRC_2014.RobotMap;
import org.usfirst.frc4825.FRC_2014.commands.*; //Not needed
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Hammer extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController hammerMotorController = RobotMap.hammerHammerMotorController;
    Solenoid latchSolenoid = RobotMap.hammerLatchSolenoid;
    DigitalInput hammerLatchSwitch = RobotMap.hammerHammerLatchSwitch;
    DigitalInput shaftResetSwitch = RobotMap.hammerShaftResetSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final int MOTOR_POLARITY = -1;
    private boolean mIsLatchReady = true;
    private boolean mIsLatchSwitchHit = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    private void setMotor(float value) {
        if (value >= -1.0 && value <= 1.0) {
            hammerMotorController.set(value); // sets arm motor controller on value from dashboard
            System.out.println(value);
        } else {
            System.out.println("Speed exceeded expected value" + value);
        }
    }

    public void pullBackHammer(float value) {
        if (isLatchReady()) {
            releaseLatch(); // releases latch
        }
        if (!isHammerAtLatch() && value <= 1.0 && value >= 0.0) {
            setMotor(value * MOTOR_POLARITY); //sets motor on value to pull load bar back with hammer
            System.out.println("Activate hammer pullBack");
        } else if (value > 1.0 || value < 0.0) {
            System.out.println("Speed exceeded expected value" + value);
        } else {
            System.out.println("Hammer at latch");
        }
    }

    public void reverseHammer(float value) {
        if (!isHammerAtReset() && value <= 1.0 && value >= 0.0) {
            setMotor(-1* value * MOTOR_POLARITY); //set motor on value to reverse load bar
            System.out.println("Activate hammer reverse");
        } else if (value > 1.0 || value < 0.0) {
            System.out.println("Hammer reverse value is too big " + value);
        } else {
            System.out.println("Hammer is already at reset");
        }
    }

    // returns is hammer hit the switch
    public boolean isHammerAtLatch() {
        if (hammerLatchSwitch.get() == false) {
            mIsLatchSwitchHit = true;
        }
        return mIsLatchSwitchHit;
    }

    // returns is load bar at reset
    public boolean isHammerAtReset() {
        return shaftResetSwitch.get();
    }

    //sets latch in ready position
    public void readyLatch() {
        if (mIsLatchReady == false) {
            latchSolenoid.set(false); //sets solenoid in ready position
            mIsLatchReady = true;
            System.out.println("Latch changed to ready position");
        }
    }

    //returns is latch in ready position
    public boolean isLatchReady() {
        return mIsLatchReady;
    }

    //releases latch
    public void releaseLatch() {
        if (isLatchReady() == true) {
            latchSolenoid.set(true); //sets solenoid in position to release hammer
            mIsLatchReady = false;
            mIsLatchSwitchHit = false;
            System.out.println("Latch removed from ready position");
        }
    }

    //stops shaft motor
    public void stopMotor() {
        System.out.println("Motor Stopped");
        setMotor(0);
    }
}
