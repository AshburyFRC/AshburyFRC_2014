// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4825.AshburySubsystemRobot.commands;
import org.usfirst.frc4825.AshburySubsystemRobot.Support.UserMessagePrinter;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4825.AshburySubsystemRobot.Robot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class DriveForward extends Command {
    double time = 0.0;
    public DriveForward() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        time = SmartDashboard.getNumber("Time of driving forward");
        setTimeout(time);
        
        UserMessagePrinter.printUserMessageLine1("moving forward");
        System.out.println("initilize forward drive");
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.driveTrain.driveForward();
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.stop();
        UserMessagePrinter.printUserMessageLine1("");
        System.out.println("end drive forward");
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
