// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/DriveWithJoysticks.h"

#include "SmartDashboard/SmartDashboard.h"
#include "../RobotDefs.h"

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftDriveMotor = RobotMap::driveTrainLeftDriveMotor;
	rightDriveMotor = RobotMap::driveTrainRightDriveMotor;
	robotDrive21 = RobotMap::driveTrainRobotDrive21;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	RobotDriveType* driveType = new RobotDriveType();
	*driveType = TANK_DRIVE;
	robotDriveChooser->AddDefault("Tank Drive", driveType);
	driveType = new RobotDriveType();
	*driveType = ARCADE_DRIVE;
	robotDriveChooser->AddDefault("Arcade Drive", driveType);
	SmartDashboard::PutData("Robot Drive Type", robotDriveChooser);	
}
    
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::processJoysticksInput(Joystick* left, Joystick* right)
{
	RobotDriveType* driveType = (RobotDriveType*)robotDriveChooser->GetSelected();
	switch( *driveType )
	{
	case TANK_DRIVE:
		robotDrive21->TankDrive(left, right);
		break;
	case ARCADE_DRIVE:
		robotDrive21->ArcadeDrive(left);
		break;
	}
}

void DriveTrain::stop()
{
	robotDrive21->Drive(0.0,0.0);
}
